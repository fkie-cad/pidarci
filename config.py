import pathlib
import os
import logging


ROOT = pathlib.Path(__file__).absolute().parent
DATA_DIR = ROOT / "data"
#TEST_DIR = ROOT / "test_samples"
TEST_DIR = ROOT / "tests"
PATTERNS_DIR = ROOT / "patterns"


CONFIG_FILE_PATH = str(os.path.abspath(__file__))
PROJECT_ROOT = str(os.path.abspath(os.sep.join([CONFIG_FILE_PATH, ".."])))

VERSION = "1.0.3"

### An (optional) WinAPI database as generated by ApiScout (https://github.com/danielplohmann/apiscout)
API_COLLECTION_FILES = {
    "win_xp": os.sep.join([PROJECT_ROOT, "data", "apiscout_winxp_prof_sp3.json"]),
    "win_7": os.sep.join([PROJECT_ROOT, "data", "apiscout_win7_prof-n_sp1.json"]),
}

### global logging-config setup
# Only do basicConfig if no handlers have been configured
LOG_PATH = "./"
LOG_LEVEL = logging.INFO
LOG_FORMAT = "%(asctime)-15s: %(name)-32s - %(message)s"
if len(logging._handlerList) == 0:
    logging.basicConfig(level=LOG_LEVEL, format=LOG_FORMAT)

### SMDA disassembler config
# maximum time for disassembly to complete
TIMEOUT = 120
# maximum number of bytes to allocate while loading
MAX_IMAGE_SIZE = 20 * 1024 * 1024
# improve disassembly by resolving references through data flows
USE_SYMBOLS_AS_CANDIDATES = True
HIGH_ACCURACY = True
RESOLVE_TAILCALLS = True
RESOLVE_REGISTER_CALLS = True
